import os ;
local benchmark = [ os.environ GOOGLE_BENCHMARK ] ;
local Eigen = [ os.environ EIGEN ] ;
local boost = [ os.environ BOOST ] ;

use-project /boost
	: $(boost)
	;

lib benchmark : :
	# watch out for empty spaces, they are mandatory
	<file>$(benchmark)/src/libbenchmark.so ;


project mitrax
	:
	source-location .
	:
	requirements <include>../include

	<warnings>all
	<c++-template-depth>1024

	<toolset>gcc:<cxxflags>-std=c++1z
	<toolset>gcc:<cxxflags>-fconstexpr-depth=1024
	<toolset>gcc:<cxxflags>-Wall
	<toolset>gcc:<cxxflags>-Wextra
	<toolset>gcc:<cxxflags>-DNDEBUG
	<toolset>gcc:<cxxflags>-DBOOST_UBLAS_NDEBUG
	<toolset>gcc:<linkflags>-lpthread

	<toolset>clang:<cxxflags>-std=c++1z
	<toolset>clang:<cxxflags>-fconstexpr-depth=1024
	<toolset>clang:<cxxflags>-Wall
	<toolset>clang:<cxxflags>-Wextra
	<toolset>clang:<cxxflags>-stdlib=libc++
	<toolset>clang:<cxxflags>-DNDEBUG
	<toolset>clang:<cxxflags>-DBOOST_UBLAS_NDEBUG
	<toolset>clang:<linkflags>-lpthread
	<toolset>clang:<linkflags>-lc++abi
	<toolset>clang:<linkflags>-stdlib=libc++

	<include>$(benchmark)/include
	<include>$(Eigen)
	<include>$(boost)
	:
	usage-requirements <include>../include
	;

exe benchmark/convolution/sobel/type/mitrax_constexpr
	:
	benchmark/convolution/sobel/type/mitrax_constexpr.cpp
	benchmark
	;

exe benchmark/convolution/sobel/type/Eigen_ct_stack
	:
	benchmark/convolution/sobel/type/Eigen_ct_stack.cpp
	benchmark
	;

exe benchmark/convolution/sobel/type/uBLAS_rt_heap
	:
	benchmark/convolution/sobel/type/uBLAS_rt_heap.cpp
	benchmark
	;


exe benchmark/convolution/sobel/size/mitrax_constexpr
	:
	benchmark/convolution/sobel/size/mitrax_constexpr.cpp
	benchmark
	;

exe benchmark/convolution/sobel/size/mitrax_constexpr_Eigen
	:
	benchmark/convolution/sobel/size/mitrax_constexpr_Eigen.cpp
	benchmark
	;

exe benchmark/convolution/sobel/size/Eigen_ct_stack
	:
	benchmark/convolution/sobel/size/Eigen_ct_stack.cpp
	benchmark
	;

exe benchmark/convolution/sobel/size/uBLAS_rt_heap
	:
	benchmark/convolution/sobel/size/uBLAS_rt_heap.cpp
	benchmark
	;


exe benchmark/make/random_value/mitrax_rt_heap
	:
	benchmark/make/random_value/mitrax_rt_heap.cpp
	benchmark
	;

exe benchmark/make/random_value/mitrax_ct_stack
	:
	benchmark/make/random_value/mitrax_ct_stack.cpp
	benchmark
	;

exe benchmark/make/random_value/mitrax_ct_heap
	:
	benchmark/make/random_value/mitrax_ct_heap.cpp
	benchmark
	;

exe benchmark/make/random_value/Eigen_rt_heap
	:
	benchmark/make/random_value/Eigen_rt_heap.cpp
	benchmark
	;

exe benchmark/make/random_value/Eigen_ct_stack
	:
	benchmark/make/random_value/Eigen_ct_stack.cpp
	benchmark
	;

exe benchmark/make/random_value/uBLAS_rt_heap
	:
	benchmark/make/random_value/uBLAS_rt_heap.cpp
	benchmark
	;


exe benchmark/make/constant_value/mitrax_rt_heap
	:
	benchmark/make/constant_value/mitrax_rt_heap.cpp
	benchmark
	;

exe benchmark/make/constant_value/mitrax_ct_stack
	:
	benchmark/make/constant_value/mitrax_ct_stack.cpp
	benchmark
	;

exe benchmark/make/constant_value/mitrax_ct_heap
	:
	benchmark/make/constant_value/mitrax_ct_heap.cpp
	benchmark
	;

exe benchmark/make/constant_value/Eigen_rt_heap
	:
	benchmark/make/constant_value/Eigen_rt_heap.cpp
	benchmark
	;

exe benchmark/make/constant_value/Eigen_ct_stack
	:
	benchmark/make/constant_value/Eigen_ct_stack.cpp
	benchmark
	;

exe benchmark/make/constant_value/uBLAS_rt_heap
	:
	benchmark/make/constant_value/uBLAS_rt_heap.cpp
	benchmark
	;


exe benchmark/binary_op/size/mitrax_rt_heap
	:
	benchmark/binary_op/size/mitrax_rt_heap.cpp
	benchmark
	;

exe benchmark/binary_op/size/mitrax_ct_stack
	:
	benchmark/binary_op/size/mitrax_ct_stack.cpp
	benchmark
	;

exe benchmark/binary_op/size/mitrax_ct_heap
	:
	benchmark/binary_op/size/mitrax_ct_heap.cpp
	benchmark
	;

exe benchmark/binary_op/size/Eigen_rt_heap
	:
	benchmark/binary_op/size/Eigen_rt_heap.cpp
	benchmark
	;

exe benchmark/binary_op/size/Eigen_ct_stack
	:
	benchmark/binary_op/size/Eigen_ct_stack.cpp
	benchmark
	;

exe benchmark/binary_op/size/uBLAS_rt_heap
	:
	benchmark/binary_op/size/uBLAS_rt_heap.cpp
	benchmark
	;
